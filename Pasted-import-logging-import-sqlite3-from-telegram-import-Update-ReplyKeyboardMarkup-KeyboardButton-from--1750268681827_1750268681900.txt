import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# 🔐 أدخل التوكن الخاص ببوتك هنا
TOKEN = "ضع_التوكن_الخاص_بك_هنا"

# 📦 إعداد قاعدة البيانات
conn = sqlite3.connect("ribeh.db")
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    referrer INTEGER,
    investment INTEGER DEFAULT 0
)''')
c.execute('''CREATE TABLE IF NOT EXISTS payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    method TEXT,
    proof BLOB
)''')
conn.commit()

# 🛠️ إعدادات السجل
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 🔘 القائمة الرئيسية
main_menu = [
    ["📦 الباقات", "💼 ملفي الشخصي"],
    ["💳 إيداع", "💸 سحب الأموال"],
    ["🧾 إثبات الدفع", "🏠 الصفحة الرئيسية"]
]

# 🚀 بدء البوت
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    await update.message.reply_text(
        f"مرحبًا بك {user.first_name} في بوت Ribeh الاستثماري 💼\nاختر من القائمة:", 
        reply_markup=reply_markup
    )
    # حفظ المستخدم
    with sqlite3.connect("ribeh.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user.id, user.username))
        conn.commit()

# 📦 الباقات
async def show_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("💼 اختر الباقة:\n1. 2000 دج\n2. 10000 دج\n3. 60000 دج")

# 👤 الملف الشخصي
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect("ribeh.db") as conn:
        c = conn.cursor()
        c.execute("SELECT investment FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        invested = result[0] if result else 0
        await update.message.reply_text(f"📊 ملفك:\nالاستثمار: {invested} دج")

# 💳 الإيداع
async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "💳 اختر وسيلة الدفع:\n1. 📱 بريدي موب\n2. 💳 CCP\n3. 🌍 Wise\n4. 💰 USDT"
    )

# 💸 السحب
async def withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("💸 لسحب الأموال، يرجى التواصل مع الدعم وإرسال رقم الحساب.")

# 🧾 إثبات الدفع
async def proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("📷 أرسل الآن صورة إثبات الدفع.")
    return 1

# حفظ إثبات الدفع
async def save_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        with sqlite3.connect("ribeh.db") as conn:
            c = conn.cursor()
            c.execute("INSERT INTO payments (user_id, method, proof) VALUES (?, ?, ?)", (user_id, "manual", photo_bytes))
            conn.commit()
        await update.message.reply_text("✅ تم استلام إثبات الدفع. سيتم مراجعته قريبًا.")
    else:
        await update.message.reply_text("❌ يرجى إرسال صورة فقط.")
    return ConversationHandler.END

# الإلغاء
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("تم الإلغاء. 🛑")
    return ConversationHandler.END

# 🧠 تشغيل البوت
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(📦 الباقات)$"), show_packages))
    app.add_handler(MessageHandler(filters.Regex("^(💼 ملفي الشخصي)$"), show_profile))
    app.add_handler(MessageHandler(filters.Regex("^(💳 إيداع)$"), deposit))
    app.add_handler(MessageHandler(filters.Regex("^(💸 سحب الأموال)$"), withdrawal))

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(🧾 إثبات الدفع)$"), proof)],
        states={1: [MessageHandler(filters.PHOTO, save_proof)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
